use ::java::world::component::DataComponentPatch

dispatch minecraft:storage["dc:index"] to dcInput

dispatch minecraft:storage["dc:template"] to dcTemplate

struct dcItemStack {
    id?: #[id(registry="item")] string,
    components?: DataComponentPatch,
    count?: int @ 1..99,
}

struct dcTriggerItem {
    id?: (
        #[id(registry="item")] string |
        #[id(registry="item", tags="allowed")] string |
    ),
    components?: DataComponentPatch,
    count?: int @ 1..99,
}

struct dcInput {
    input: struct {
        [string]: dcIndex,
    },
    keylist: [string],
}

struct dcTemplate {
    [string]: dcIndex,
}

struct dcIndex {
    type?: dcType,
    extra_data?: struct {
        width?: float @ 0.0..2.0,
        offset?: float @ -2.0..2.0,
        level?: byte @ 0..15,
        hitbox?: boolean,
    },
    template?: string,
    item?: dcItemStack,
    loot_table?: #[id="loot_table"] string,
    modsize?: [float] @ 3,
    interactsize?: struct {
        height?: float,
        width?: float,
    },
    prop?: struct {
        height_adaption?: boolean,
    },
    events?: struct {
        construct?: [dcEvent],
        left_click?: struct {
            fallback?: dcEvent,
            criteria?: [dcEventCriteria],
        },
        right_click?: struct {
            fallback?: dcEvent,
            criteria?: [dcEventCriteria],
        },
    },
}

enum(string) dcType {
    Regular = "regular",
    Fixed = "fixed",
    Hitbox = "hitbox",
    Light = "light",
}

enum(string) eventID {
    custom = "custom",
    destruct = "destruct",
    group = "group",
    info = "info",
    move = "move",
    random = "random",
    rotate = "rotate",
    scale = "scale",
    sit = "sit",
    sound = "sound",
    trans = "trans",
    update = "update",
    nothing = "__nothing__",
    pre_move_r_1px = "pre/move_r_1px",
    pre_move_r_m1px = "pre/move_r_-1px",
    pre_move_y_1px = "pre/move_y_1px",
    pre_move_y_m1px = "pre/move_y_-1px",
    pre_rotate_h_225 = "pre/rotate_h_225",
    pre_rotate_h_m225 = "pre/rotate_h_-225",
    pre_rotate_v_225 = "pre/rotate_v_225",
    pre_rotate_v_m225 = "pre/rotate_v_-225",
    pre_scale_02 = "pre/scale_02",
    pre_scale_m02 = "pre/scale_-02",
}

struct dcEventCriteria {
    item?: dcTriggerItem,
    predicate?: (#[id="predicate"] string | string),
    ...dcEvent,
}

struct dcEvent {
    event: eventID,
    ...dc:args[[event]],
}

dispatch dc:args[destruct] to struct argsDestruct {
    args?: struct {
        item?: destructItem,
        particle?: (#[id="particle_type"] string | string),
        sound?: #[id="sound_event"] string,
    },
}

type destructItem = (
    any |
    struct {
        mode?: enum(string) {
            Add = "add",
            Replace = "replace",
            Inherit = "inherit",
        },
        item?: dcItemStack,
        loot_table?: #[id="loot_table"] string,
    } |
)

dispatch dc:args[move] to struct argsMove {
    args?: struct {
        type?: enum(string) {
            X = "X",
            Y = "Y",
            Z = "Z",
            R = "R",
            V = "V",
        },
        distance: float @ -2.0..2.0,
    },
}

dispatch dc:args[rotate] to struct argsRotate {
    args?: struct {
        type?: enum(string) {
            H = "H",
            V = "V",
        },
        angle: float @ -180.0..180.0,
    },
}

dispatch dc:args[sit] to struct argsSit {
    args?: struct {
        orient?: any,
    },
}

dispatch dc:args[sound] to struct argsSound {
    args?: struct {
        sound?: #[id="sound_event"] string,
    },
}

dispatch dc:args[trans] to struct argsTrans {
    args?: struct {
        index: string,
        func?: #[id="function"] string,
    },
}

dispatch dc:args[scale] to struct argsScale {
    args?: struct {
        scale: float,
    },
}

dispatch dc:args[update] to struct argsUpdate {
    args?: struct {},
}

dispatch dc:args[info] to struct argsInfo {
    args?: struct {},
}

dispatch dc:args["__nothing__"] to struct argsNothing {
    args?: struct {},
}

dispatch dc:args[group] to struct argsGroup {
    args?: struct {
        events: [dcEvent],
    },
}

dispatch dc:args[random] to struct argsRandom {
    args?: struct {
        events: [dcEventRandom],
    },
}

struct dcEventRandom {
    weight: int @ 0..,
    ...dcEvent,
}

dispatch dc:args[custom] to struct argsCustom {
    args?: struct {
        func: string,
        [any]?: any,
    },
}
